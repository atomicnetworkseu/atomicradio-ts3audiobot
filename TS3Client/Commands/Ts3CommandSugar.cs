// TS3Client - A free TeamSpeak3 client implementation
// Copyright (C) 2017  TS3Client contributors
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the Open Software License v. 3.0
//
// You should have received a copy of the Open Software License along with this
// program. If not, see <https://opensource.org/licenses/OSL-3.0>.
// <auto-generated />









namespace TS3Client.Commands
{
	using System;
	using System.Collections.Generic;
	using System.Diagnostics;

	public partial class Ts3Command
	{


		[DebuggerStepThrough] public Ts3Command Add(string key, bool? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public Ts3Command Add(string key, bool value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public Ts3Command Add(string key, IEnumerable<bool> value) => Add(new CommandMultiParameter(key, value));


		[DebuggerStepThrough] public Ts3Command Add(string key, sbyte? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public Ts3Command Add(string key, sbyte value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public Ts3Command Add(string key, IEnumerable<sbyte> value) => Add(new CommandMultiParameter(key, value));


		[DebuggerStepThrough] public Ts3Command Add(string key, byte? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public Ts3Command Add(string key, byte value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public Ts3Command Add(string key, IEnumerable<byte> value) => Add(new CommandMultiParameter(key, value));


		[DebuggerStepThrough] public Ts3Command Add(string key, short? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public Ts3Command Add(string key, short value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public Ts3Command Add(string key, IEnumerable<short> value) => Add(new CommandMultiParameter(key, value));


		[DebuggerStepThrough] public Ts3Command Add(string key, ushort? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public Ts3Command Add(string key, ushort value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public Ts3Command Add(string key, IEnumerable<ushort> value) => Add(new CommandMultiParameter(key, value));


		[DebuggerStepThrough] public Ts3Command Add(string key, int? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public Ts3Command Add(string key, int value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public Ts3Command Add(string key, IEnumerable<int> value) => Add(new CommandMultiParameter(key, value));


		[DebuggerStepThrough] public Ts3Command Add(string key, uint? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public Ts3Command Add(string key, uint value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public Ts3Command Add(string key, IEnumerable<uint> value) => Add(new CommandMultiParameter(key, value));


		[DebuggerStepThrough] public Ts3Command Add(string key, long? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public Ts3Command Add(string key, long value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public Ts3Command Add(string key, IEnumerable<long> value) => Add(new CommandMultiParameter(key, value));


		[DebuggerStepThrough] public Ts3Command Add(string key, ulong? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public Ts3Command Add(string key, ulong value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public Ts3Command Add(string key, IEnumerable<ulong> value) => Add(new CommandMultiParameter(key, value));


		[DebuggerStepThrough] public Ts3Command Add(string key, float? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public Ts3Command Add(string key, float value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public Ts3Command Add(string key, IEnumerable<float> value) => Add(new CommandMultiParameter(key, value));


		[DebuggerStepThrough] public Ts3Command Add(string key, double? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public Ts3Command Add(string key, double value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public Ts3Command Add(string key, IEnumerable<double> value) => Add(new CommandMultiParameter(key, value));


		[DebuggerStepThrough] public Ts3Command Add(string key, string value) { if(value != null) Add(new CommandParameter(key, value)); return this; }

		[DebuggerStepThrough] public Ts3Command Add(string key, IEnumerable<string> value) => Add(new CommandMultiParameter(key, value));


		[DebuggerStepThrough] public Ts3Command Add(string key, DateTime? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public Ts3Command Add(string key, DateTime value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public Ts3Command Add(string key, IEnumerable<DateTime> value) => Add(new CommandMultiParameter(key, value));

	}
}